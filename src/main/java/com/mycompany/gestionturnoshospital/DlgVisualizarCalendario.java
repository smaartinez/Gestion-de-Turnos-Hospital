package com.mycompany.gestionturnoshospital;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.WeekFields;
import java.util.*;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author martina V
 */
public class DlgVisualizarCalendario extends javax.swing.JDialog {

    private final JComboBox<String> cboVista = new JComboBox<>(new String[]{"Día","Semana","Mes"});
    private final JSpinner spFecha = new JSpinner(new javax.swing.SpinnerDateModel(new Date(), null, null, java.util.Calendar.DAY_OF_MONTH));
    private final JButton btnHoy  = new JButton("Hoy");
    private final JButton btnPrev = new JButton("◀");
    private final JButton btnNext = new JButton("▶");

    private final JComboBox<String> cboArea = new JComboBox<>();
    private final JComboBox<String> cboEnfermera = new JComboBox<>();
    private final JCheckBox chkAsignado  = new JCheckBox("Asignado",  true);
    private final JCheckBox chkPendiente = new JCheckBox("Pendiente", true);
    private final JCheckBox chkConflicto = new JCheckBox("Conflicto", true);
    private final JButton btnCerrar = new JButton("Cerrar");
    private final JLabel  lblRango  = new JLabel(" ", SwingConstants.CENTER);

    // ---- Centro: tablas por vista
    private final JTabbedPane tabs = new JTabbedPane(JTabbedPane.TOP);
    private final JTable tblDia    = makeCalendarTable();
    private final JTable tblSemana = makeCalendarTable();
    private final JTable tblMes    = makeCalendarTable();

    // ---- Otros
    private final LegendPanel legend = new LegendPanel();
    private final DateTimeFormatter fmtFecha = DateTimeFormatter.ofPattern("EEEE d 'de' MMMM 'de' yyyy", new Locale("es","CL"));
    private final DateTimeFormatter fmtHora  = DateTimeFormatter.ofPattern("HH:mm");
    private final WeekFields weekFields      = WeekFields.of(new Locale("es","CL"));

    private ScheduleProvider provider = (desde,hasta,area,enf) -> Collections.emptyList();

    public DlgVisualizarCalendario(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle("Visualizar Calendario — Gestión de Turnos Hospital");
        setIconImage(makeWindowIcon());
        initComponents();
        buildUI();
        initBehavior();
        applyHospitalTheme();
        reloadAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlHost = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlHost.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgVisualizarCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgVisualizarCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgVisualizarCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgVisualizarCalendario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgVisualizarCalendario dialog = new DlgVisualizarCalendario(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
 private void buildUI() {
        Container cp = pnlHost;
        cp.removeAll();
        cp.setLayout(new BorderLayout(0,0));

        // Top fila 1: Vista + navegación + fecha + rango
        JPanel top1 = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(6,6,6,6);
        c.gridy  = 0;

        style(cboVista); style(btnPrev); style(btnNext); style(btnHoy);
        style(spFecha);  style(lblRango);

        c.gridx=0; top1.add(new JLabel("Vista:"), c);
        c.gridx=1; top1.add(cboVista, c);
        c.gridx=2; top1.add(btnPrev,  c);
        c.gridx=3; top1.add(btnNext,  c);
        c.gridx=4; top1.add(btnHoy,   c);
        c.gridx=5; top1.add(new JLabel("Fecha:"), c);
        c.gridx=6; top1.add(spFecha, c);
        c.gridx=7; c.weightx=1; c.fill=GridBagConstraints.HORIZONTAL; top1.add(lblRango, c);

        // Top fila 2: Filtros (área, enfermera, estados) + cerrar
        JPanel top2 = new JPanel(new GridBagLayout());
        GridBagConstraints d = new GridBagConstraints();
        d.insets = new Insets(4,6,4,6);
        d.gridy  = 0;

        style(cboArea); style(cboEnfermera);
        style(chkAsignado); style(chkPendiente); style(chkConflicto);
        style(btnCerrar);

        d.gridx=0; top2.add(new JLabel("Área:"), d);
        d.gridx=1; top2.add(cboArea, d);
        d.gridx=2; top2.add(new JLabel("Enfermera:"), d);
        d.gridx=3; top2.add(cboEnfermera, d);
        d.gridx=4; top2.add(chkAsignado, d);
        d.gridx=5; top2.add(chkPendiente, d);
        d.gridx=6; top2.add(chkConflicto, d);
        d.gridx=7; top2.add(btnCerrar, d);

        // Tabs y tablas
        JScrollPane spDia    = new JScrollPane(tblDia);
        JScrollPane spSem    = new JScrollPane(tblSemana);
        JScrollPane spMes    = new JScrollPane(tblMes);
        tabs.addTab("Día",    spDia);
        tabs.addTab("Semana", spSem);
        tabs.addTab("Mes",    spMes);

        // North combinado
        JPanel north = new JPanel(new BorderLayout());
        north.add(top1, BorderLayout.NORTH);
        north.add(top2, BorderLayout.SOUTH);

        // South leyenda
        JPanel south = new JPanel(new BorderLayout());
        south.add(legend, BorderLayout.CENTER);

        // Agregar
        cp.add(north, BorderLayout.NORTH);
        cp.add(tabs,  BorderLayout.CENTER);
        cp.add(south, BorderLayout.SOUTH);

        setMinimumSize(new Dimension(980, 640));
        setLocationRelativeTo(getParent());
        cp.validate();
        cp.repaint();
    }


    private JTable makeCalendarTable() {
        JTable t = new JTable();
        t.setRowHeight(28);
        t.setFillsViewportHeight(true);
        t.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        t.setDefaultRenderer(Object.class, new CalendarCellRenderer());
        t.getTableHeader().setReorderingAllowed(false);
        return t;
    }

    private void style(JComponent comp) {
    if (comp instanceof JButton) {
        ((JButton) comp).setFocusPainted(false);
    }
    if (comp instanceof JTextField) {
        ((JTextField) comp).setColumns(14);
    }
    if (comp instanceof JComboBox) {
        @SuppressWarnings("unchecked")
        JComboBox<String> cb = (JComboBox<String>) comp; // todas tus combos son de String
        cb.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXXX");
    }
    if (comp == lblRango) {
        lblRango.setFont(
            lblRango.getFont().deriveFont(Font.BOLD, lblRango.getFont().getSize() + 1f)
        );
    }
        
    }

    private void applyHospitalTheme() {
        Color panel = Color.WHITE;
        Color accent = new Color(0, 110, 160);
        pnlHost.setBackground(panel);
        tabs.setBackground(panel);
        tabs.setForeground(accent);
        legend.setBackground(panel);
        lblRango.setForeground(accent.darker());
    }

    private Image makeWindowIcon() {
        int size = 16;
        Image img = new BufferedImage(size, size, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = (Graphics2D) img.getGraphics();
        g.setColor(new Color(0,120,180));
        g.fillRoundRect(0,0,size,size,4,4);
        g.setColor(Color.WHITE);
        g.fillOval(3,3,10,10);
        g.dispose();
        return img;
    }

    // ====================== BEHAVIOR ======================
    private void initBehavior() {
        JSpinner.DateEditor editor = new JSpinner.DateEditor(spFecha, "dd/MM/yyyy");
        spFecha.setEditor(editor);

        cboVista.addActionListener(e -> { tabs.setSelectedIndex(cboVista.getSelectedIndex()); reloadAll(); });
        tabs.addChangeListener(e   -> { cboVista.setSelectedIndex(tabs.getSelectedIndex()); reloadAll(); });

        btnHoy.addActionListener(e -> { spFecha.setValue(new Date()); reloadAll(); });
        btnPrev.addActionListener(e -> moveDate(-1));
        btnNext.addActionListener(e -> moveDate(+1));

        ItemListener refilter = e -> {
            if (e.getStateChange()==ItemEvent.SELECTED || e.getStateChange()==ItemEvent.DESELECTED) reloadAll();
        };
        cboArea.addItemListener(refilter);
        cboEnfermera.addItemListener(refilter);
        chkAsignado.addItemListener(refilter);
        chkPendiente.addItemListener(refilter);
        chkConflicto.addItemListener(refilter);

        btnCerrar.addActionListener(e -> dispose());

        enableDetailOnDoubleClick();
        
    }

    private void moveDate(int step) {
        Date d = (Date) spFecha.getValue();
        LocalDate ld = d.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        if (tabs.getSelectedIndex()==0)      ld = ld.plusDays(step);
        else if (tabs.getSelectedIndex()==1) ld = ld.plusWeeks(step);
        else                                 ld = ld.plusMonths(step);
        spFecha.setValue(Date.from(ld.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        reloadAll();
    }

    
    // ====================== INTEGRACIÓN PÚBLICA ======================
    /** Inyecta tu backend de turnos. */
    public void setScheduleProvider(ScheduleProvider provider) {
        if (provider!=null) this.provider = provider;
        reloadAll();
    }
    /** Carga áreas en el combo. Incluye "(Todas)". */
    
    public void setAreas(List<String> areas) {
        DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();
        m.addElement("(Todas)");
        if (areas!=null) for (String a: areas) m.addElement(a);
        cboArea.setModel(m);
    }
    /** Carga enfermeras en el combo. Incluye "(Todas)". */
    public void setEnfermeras(List<String> enfermeras) {
        DefaultComboBoxModel<String> m = new DefaultComboBoxModel<>();
        m.addElement("(Todas)");
        if (enfermeras!=null) for (String e: enfermeras) m.addElement(e);
        cboEnfermera.setModel(m);
    }

    // ====================== CARGA Y MODELOS ======================
    private void reloadAll() {
        LocalDate base = getSelectedLocalDate();
        String area = selectedOrNull(cboArea);
        String enf  = selectedOrNull(cboEnfermera);

        Set<Estado> estados = new HashSet<>();
        if (chkAsignado.isSelected())  estados.add(Estado.ASIGNADO);
        if (chkPendiente.isSelected()) estados.add(Estado.PENDIENTE);
        if (chkConflicto.isSelected()) estados.add(Estado.CONFLICTO);

        if (tabs.getSelectedIndex()==0) {
            // Día
            LocalDateTime desde = base.atStartOfDay();
            LocalDateTime hasta = base.plusDays(1).atStartOfDay().minusNanos(1);
            List<ScheduleItem> items = filterAndFetch(desde, hasta, area, enf, estados);
            lblRango.setText(base.format(fmtFecha));
            DayTableModel model = new DayTableModel(items, fmtHora);
            tblDia.setModel(model);
            configureDayColumns(tblDia);
        } else if (tabs.getSelectedIndex()==1) {
            // Semana (lunes a domingo según locale)
            LocalDate monday = base.with(weekFields.dayOfWeek(), 1);
            LocalDate sunday = monday.plusDays(6);
            LocalDateTime desde = monday.atStartOfDay();
            LocalDateTime hasta = sunday.plusDays(1).atStartOfDay().minusNanos(1);
            List<ScheduleItem> items = filterAndFetch(desde, hasta, area, enf, estados);
            lblRango.setText("Semana " + monday.format(fmtFecha) + " → " + sunday.format(fmtFecha));
            WeekTableModel model = new WeekTableModel(items, monday, fmtHora);
            tblSemana.setModel(model);
            configureWeekColumns(tblSemana);
        } else {
            // Mes
            LocalDate first = base.withDayOfMonth(1);
            LocalDate last  = first.plusMonths(1).minusDays(1);
            LocalDateTime desde = first.atStartOfDay();
            LocalDateTime hasta = last.plusDays(1).atStartOfDay().minusNanos(1);
            List<ScheduleItem> items = filterAndFetch(desde, hasta, area, enf, estados);
            lblRango.setText("Mes " + first.getMonth().getDisplayName(java.time.format.TextStyle.FULL, new Locale("es","CL")) + " " + first.getYear());
            MonthTableModel model = new MonthTableModel(items, first);
            tblMes.setModel(model);
            configureMonthColumns(tblMes);
        }
    }

    private List<ScheduleItem> filterAndFetch(LocalDateTime desde, LocalDateTime hasta, String area, String enf, Set<Estado> estados) {
        List<ScheduleItem> src = provider.get(desde, hasta, area, enf);
        if (src == null) return Collections.emptyList();
        List<ScheduleItem> out = new ArrayList<>();
        for (ScheduleItem it : src) if (estados.contains(it.estado)) out.add(it);
        return out;
    }

    private LocalDate getSelectedLocalDate() {
        Date d = (Date) spFecha.getValue();
        return d.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }
    private String selectedOrNull(JComboBox<String> cb) {
        Object v = cb.getSelectedItem();
        if (v==null) return null;
        String s = v.toString();
        if (s.startsWith("(")) return null; // "(Todas)"
        return s;
    }


    // ====================== COLUMNAS / RENDERERS ======================
    private void configureDayColumns(JTable t){ 
        t.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
        if (t.getColumnCount()>=4) {
            t.getColumnModel().getColumn(0).setPreferredWidth(70);
            t.getColumnModel().getColumn(1).setPreferredWidth(220);
            t.getColumnModel().getColumn(2).setPreferredWidth(180);
            t.getColumnModel().getColumn(3).setPreferredWidth(160);
        }
    }
    private void configureWeekColumns(JTable t) {
        t.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (int i=0;i<t.getColumnCount();i++) {
            TableColumn col = t.getColumnModel().getColumn(i);
            if (i==0) col.setPreferredWidth(70);
            else col.setPreferredWidth(150);
        }
        JTableHeader h = t.getTableHeader();
        h.setFont(h.getFont().deriveFont(Font.BOLD));
    }
    private void configureMonthColumns(JTable t) {
        t.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        for (int i=0;i<t.getColumnCount();i++) {
            t.getColumnModel().getColumn(i).setPreferredWidth(150);
        }
        t.setRowHeight(90);
    }

    private class CalendarCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
                                                       int row, int column) {
            Component comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            setBorder(noFocusBorder);

            // En vista Mes se pinta con objeto MonthCellData (texto HTML)
            if (table==tblMes && value instanceof MonthCellData) {
                MonthCellData mcd = (MonthCellData) value;
                setText("<html><div style='padding:4px;"+(mcd.outOfMonth?"color:#999;":"")+"'>"+
                        mcd.htmlEscapedText().replace("\n","<br>")+"</div></html>");
                setVerticalAlignment(TOP);
                setHorizontalAlignment(LEFT);
                if (!isSelected) setBackground(mcd.outOfMonth? new Color(245,245,245) : Color.WHITE);
                return comp;
            }

            // Coloreado por estado leyendo etiquetas en el texto "[ASIGNADO]" etc.
            String s = String.valueOf(value);
            Color base = Color.WHITE;
            if (s.contains("[ASIGNADO]"))   base = new Color(225, 245, 234);
            else if (s.contains("[PENDIENTE]")) base = new Color(255, 249, 196);
            else if (s.contains("[CONFLICTO]")) base = new Color(252, 228, 236);
            if (!isSelected) setBackground(base);
            setVerticalAlignment(CENTER);
            setHorizontalAlignment(LEFT);
            return comp;
        }
    }


    // ====================== RENDER MONTH / LEGEND ======================
    private static class MonthCellData {
        final LocalDate day; final String text; final boolean outOfMonth;
        MonthCellData(LocalDate d, String t, boolean out){ day=d; text=t; outOfMonth=out; }
        String htmlEscapedText() { return text.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;"); }
    }

    private static class LegendPanel extends JPanel {
        LegendPanel() {
            setLayout(new FlowLayout(FlowLayout.LEFT, 12, 8));
            add(dot("Asignado",  new Color(0, 137, 123)));
            add(dot("Pendiente", new Color(251, 192, 45)));
            add(dot("Conflicto", new Color(211, 47, 47)));
            add(new JLabel("  |  Doble clic en una celda para ver detalles"));
        }
        private JComponent dot(String txt, Color color) {
            JPanel p = new JPanel(new FlowLayout(FlowLayout.LEFT, 6, 0));
            p.setOpaque(false);
            JComponent c = new JComponent() {
                @Override public Dimension getPreferredSize(){ return new Dimension(14,14); }
                @Override protected void paintComponent(Graphics g){
                    g.setColor(color); g.fillOval(2,2,10,10);
                }
            };
            p.add(c); p.add(new JLabel(txt));
            return p;
        }          
    }

    private void enableDetailOnDoubleClick() {
        java.awt.event.MouseAdapter ma = new java.awt.event.MouseAdapter() {
            @Override public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    JTable t = (JTable) e.getSource();
                    int r = t.getSelectedRow();
                    if (r < 0) return;
                    Object hora   = safeGet(t, r, 0);
                    Object titulo = safeGet(t, r, 1);
                    Object enf    = (t.getColumnCount() > 2) ? safeGet(t, r, 2) : "";
                    Object area   = (t.getColumnCount() > 3) ? safeGet(t, r, 3) : "";
                    Object est    = (t.getColumnCount() > 4) ? safeGet(t, r, 4) : "";
                    JOptionPane.showMessageDialog(DlgVisualizarCalendario.this,
                            "Título: " + titulo + "\nEnfermera: " + enf + "\nÁrea: " + area +
                            "\nHorario: " + hora + "\nEstado: " + est,
                            "Detalle del turno", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            private Object safeGet(JTable t, int r, int c) {
                return (c < t.getColumnCount() && r >= 0) ? t.getValueAt(r, c) : "";
            }
        };
        tblDia.addMouseListener(ma);
        tblSemana.addMouseListener(ma);
        tblMes.addMouseListener(ma);
    }

    // ====================== DOMAIN ======================
    public enum Estado { ASIGNADO, PENDIENTE, CONFLICTO }

    public static class ScheduleItem {
        public final LocalDateTime inicio, fin;
        public final String area, enfermera, titulo;
        public final Estado estado;
        public ScheduleItem(LocalDateTime inicio, LocalDateTime fin, String area, String enfermera, Estado estado, String titulo) {
            this.inicio=inicio; this.fin=fin; this.area=area; this.enfermera=enfermera; this.estado=estado; this.titulo=titulo;
        }
    }

    @FunctionalInterface
    public interface ScheduleProvider {
        List<ScheduleItem> get(LocalDateTime desde, LocalDateTime hasta, String area, String enfermera);
    }


    private static class DayTableModel extends AbstractTableModel {
        private final String[] cols = {"Hora","Título","Enfermera","Área","Estado"};
        private final List<Object[]> rows;
        DayTableModel(List<ScheduleItem> items, DateTimeFormatter fmtHora) {
            List<Object[]> tmp = new ArrayList<>();
            items.sort(Comparator.comparing(i->i.inicio));
            for (ScheduleItem it : items) {
                String hora = fmtHora.format(it.inicio) + "–" + fmtHora.format(it.fin);
                String tituloConEstado = it.titulo + " [" + it.estado.name() + "]";
                tmp.add(new Object[]{hora, tituloConEstado, it.enfermera, it.area, it.estado});
            }
            rows = Collections.unmodifiableList(tmp);
        }
        public int getRowCount() { return rows.size(); }
        public int getColumnCount() { return cols.length; }
        public String getColumnName(int c){ return cols[c]; }
        public Object getValueAt(int r,int c){ return rows.get(r)[c]; }
        public Class<?> getColumnClass(int c) { return c==4? Estado.class : String.class; }
        public boolean isCellEditable(int r,int c){ return false; }
    }

    private static class WeekTableModel extends AbstractTableModel {
        private final String[] cols;
        private final List<Object[]> rows;
        WeekTableModel(List<ScheduleItem> items, LocalDate monday, DateTimeFormatter fmtHora) {
            cols = new String[8];
            cols[0] = "Hora";
            for (int i=0;i<7;i++) {
                LocalDate d = monday.plusDays(i);
                String name = d.getDayOfWeek().getDisplayName(java.time.format.TextStyle.SHORT, new Locale("es","CL"));
                cols[i+1] = Character.toUpperCase(name.charAt(0))+name.substring(1) + " " + d.getDayOfMonth();
            }
            Map<Integer, List<ScheduleItem>[]> grid = new LinkedHashMap<>();
            for (int h=0; h<24; h++) grid.put(h, new List[]{new ArrayList<>(),new ArrayList<>(),new ArrayList<>(),new ArrayList<>(),new ArrayList<>(),new ArrayList<>(),new ArrayList<>()});

            for (ScheduleItem it : items) {
                LocalDate d0 = it.inicio.toLocalDate();
                int dayIndex = (int) ChronoUnit.DAYS.between(monday, d0);
                if (dayIndex<0 || dayIndex>6) continue;
                int hour = it.inicio.getHour();
                grid.get(hour)[dayIndex].add(it);
            }

            List<Object[]> tmp = new ArrayList<>();
            for (Map.Entry<Integer, List<ScheduleItem>[]> e : grid.entrySet()) {
                int hour = e.getKey();
                Object[] row = new Object[8];
                row[0] = String.format("%02d:00", hour);
                for (int d=0; d<7; d++) {
                    List<ScheduleItem> cell = e.getValue()[d];
                    row[d+1] = renderCell(cell, fmtHora);
                }
                tmp.add(row);
            }
            rows = Collections.unmodifiableList(tmp);
        }
        private String renderCell(List<ScheduleItem> ls, DateTimeFormatter fmtHora) {
            if (ls==null || ls.isEmpty()) return "";
            StringBuilder sb = new StringBuilder();
            for (int i=0;i<ls.size();i++) {
                ScheduleItem it = ls.get(i);
                if (i>0) sb.append(" | ");
                sb.append(fmtHora.format(it.inicio))
                  .append(" ").append(it.titulo)
                  .append(" [").append(it.estado.name()).append("]")
                  .append(" (").append(it.enfermera).append(")");
            }
            return sb.toString();
        }
        public int getRowCount() { return rows.size(); }
        public int getColumnCount() { return cols.length; }
        public String getColumnName(int c){ return cols[c]; }
        public Object getValueAt(int r,int c){ return rows.get(r)[c]; }
        public Class<?> getColumnClass(int c) { return String.class; }
        public boolean isCellEditable(int r,int c){ return false; }
    }

    private static class MonthTableModel extends AbstractTableModel {
        private final String[] cols = {"Lun","Mar","Mié","Jue","Vie","Sáb","Dom"};
        private final List<Object[]> rows;

        MonthTableModel(List<ScheduleItem> items, LocalDate firstDayOfMonth) {
            LocalDate firstMonday = firstDayOfMonth.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));
            Map<LocalDate, List<ScheduleItem>> map = new HashMap<>();
            for (ScheduleItem it : items) {
                LocalDate d = it.inicio.toLocalDate();
                map.computeIfAbsent(d, k-> new ArrayList<>()).add(it);
            }
            List<Object[]> tmp = new ArrayList<>();
            for (int week=0; week<6; week++) {
                Object[] row = new Object[7];
                for (int d=0; d<7; d++) {
                    LocalDate day = firstMonday.plusDays(week*7 + d);
                    List<ScheduleItem> ls = map.getOrDefault(day, Collections.emptyList());
                    StringBuilder sb = new StringBuilder();
                    sb.append(day.getDayOfMonth()).append("\n");
                    for (int i=0; i<Math.min(3, ls.size()); i++) {
                        ScheduleItem it = ls.get(i);
                        sb.append("• ").append(it.titulo)
                          .append(" [").append(it.estado.name()).append("]")
                          .append(" (").append(it.enfermera).append(")").append("\n");
                    }
                    if (ls.size()>3) sb.append("… ").append(ls.size()-3).append(" más");
                    row[d] = new MonthCellData(day, sb.toString(), !day.getMonth().equals(firstDayOfMonth.getMonth()));
                }
                tmp.add(row);
            }
            rows = Collections.unmodifiableList(tmp);
        }
        public int getRowCount() { return rows.size(); }
        public int getColumnCount() { return cols.length; }
        public String getColumnName(int c){ return cols[c]; }
        public Object getValueAt(int r,int c){ return rows.get(r)[c]; }
        public Class<?> getColumnClass(int c) { return Object.class; }
        public boolean isCellEditable(int r,int c){ return false; }
    }
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlHost;
    // End of variables declaration//GEN-END:variables
}
